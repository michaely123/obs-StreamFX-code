// AUTOGENERATED COPYRIGHT HEADER START
// Copyright (C) 2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
// AUTOGENERATED COPYRIGHT HEADER END

#pragma once
#include "common.hpp"
#include "obs/obs-source-factory.hpp"

#include "warning-disable.hpp"
#include <vector>
#include "warning-enable.hpp"

namespace streamfx::filter::spout {
	class audio_instance : public obs::source_instance {
		public:
		audio_instance(obs_data_t*, obs_source_t*);
		virtual ~audio_instance() override;

		virtual void load(obs_data_t* settings) override;
		virtual void migrate(obs_data_t* data, uint64_t version) override;
		virtual void update(obs_data_t*) override;

		struct obs_audio_data* filter_audio(struct obs_audio_data* audio) override;
	};

	class audio_factory : public obs::source_factory<filter::spout::audio_factory, filter::spout::audio_instance> {
		public:
		audio_factory();
		virtual ~audio_factory() override;

		virtual const char* get_name() override;

		virtual void get_defaults2(obs_data_t* data) override;

		virtual obs_properties_t* get_properties2(filter::spout::audio_instance* data) override;

		public: // Singleton
		static std::shared_ptr<audio_factory> instance();
	};
} // namespace streamfx::filter::spout
