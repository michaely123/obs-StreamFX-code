// AUTOGENERATED COPYRIGHT HEADER START
// Copyright (C) 2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
// AUTOGENERATED COPYRIGHT HEADER END

#pragma once
#include "common.hpp"
#include "gfx/gfx-source-texture.hpp"
#include "obs/gs/gs-texrender.hpp"
#include "obs/gs/gs-sampler.hpp"
#include "obs/obs-signal-handler.hpp"
#include "obs/obs-source-active-child.hpp"
#include "obs/obs-source-factory.hpp"
#include "obs/obs-source.hpp"
#include "obs/obs-tools.hpp"

#include "warning-disable.hpp"
#include <condition_variable>
#include <mutex>
#include <queue>
#include <thread>
#include <vector>
#include "warning-enable.hpp"

namespace streamfx::source::sink {
	class sink_instance : public obs::source_instance {
		public:
		sink_instance(obs_data_t* settings, obs_source_t* self);
		virtual ~sink_instance();

		virtual uint32_t get_width() override;
		virtual uint32_t get_height() override;

		virtual void load(obs_data_t*) override;
		virtual void migrate(obs_data_t*, uint64_t) override;
		virtual void update(obs_data_t*) override;
		virtual void save(obs_data_t*) override;

		virtual void video_tick(float_t) override;
		virtual void video_render(gs_effect_t*) override;

		virtual void enum_active_sources(obs_source_enum_proc_t, void*) override;
		virtual void enum_all_sources(obs_source_enum_proc_t, void*) override;
	};

	class sink_factory : public obs::source_factory<source::sink::sink_factory, source::sink::sink_instance> {
		public:
		sink_factory();
		virtual ~sink_factory() override;

		virtual const char* get_name() override;

		virtual void get_defaults2(obs_data_t* data) override;

		virtual obs_properties_t* get_properties2(source::sink::sink_instance* data) override;

		public: // Singleton
		static std::shared_ptr<sink_factory> instance();
	};
} // namespace streamfx::source::sink
